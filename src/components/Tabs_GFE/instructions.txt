TABS | INSTRUCTIONS
1. Define API: items array of objects with keys: value, label, content
2. Pass API through `items` prop to `Tabs` component.
3. Define HTML for `Tabs` component.
     3.1 div > div > button
             > div > p
4. Define `value` state for `Tabs` component.
     4.1 if `defaultValue` is not provided, use first item as value
5. Render `Tabs` button
     5.1 Iterate `items` props to render tab buttons.
     5.2 Destructure `label` and `value` as arguments from `items` prop
           5.2.1 Set `itemValue` as `value` in props
     5.3 Each button from list should be unique
     5.4 Render button with `label`
     5.5 Define onClick event
6. Render `Tabs` content
     6.1 Iterate `items` props to render tab content.
     6.2 Destructure `value` and `content`
           6.2.1 Set `itemValue` as `value` in props
     6.3 Each div from list should be unique
     6.4 The `content` whose `value` is not equal to `itemValue` should be hidden.
7. Define `isActiveView` when rendering tab buttons.
8. Styles

TABS: ORDER OF ACTIONS
TABS: LESSONS
https://stackoverflow.com/questions/42522515/what-are-react-controlled-components-and-uncontrolled-components
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing
https://michaeluloth.com/filter-boolean

-- -- -- -- -- -- -- -- -- -- --
TABS: ARIA ROLES, STATES, PROPERTIES | INSTRUCTIONS
TABS: ARIA ROLES, STATES, PROPERTIES | ORDER OF ACTIONS
TABS: ARIA ROLES, STATES, PROPERTIES | LESSONS
https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-selected
https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-controls
https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-labelledby

-- -- -- -- -- -- -- -- -- -- --
TABS: KEYBOARD EVENTS | INSTRUCTIONS
1. Declare `itemValue` to be equal to `value` when mapping `items`
     1.1 Update `value` as `itemValue`
2. Add the `onKeyDown` prop to <div role="tablist">.
3. Define `setValueViaIndex` function
     3.1 Set new state for `tabValue` as the current `items` value
     3.2 Bring new tab to come into focus by using its id
4. Use switch case to read the `event.code` property and respond accordingly depending on its value.
     4.1 For each reducer case, define `index` as the index where `itemValue` matches `tabValue`.
     4.2 Call `setValueViaIndex` and pass `index` argument
           4.2.1 Use modulo to wrap around to the end if necessary.
 

TABS: KEYBOARD EVENTS | ORDER OF ACTIONS
TABS: KEYBOARD EVENTS | LESSONS

